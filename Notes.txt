@Component
public class MaskSensitiveValidator implements ConstraintValidator<MaskSensitiveConstraint, String> {

    private int startPos;
    private int endPos;
    private char maskChar;

    @Override
    public void initialize(MaskSensitiveConstraint constraint) {
        this.startPos = constraint.startPos();
        this.endPos = constraint.endPos();
        this.maskChar = constraint.maskChar();
    }

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }

        String maskedValue = maskSensitiveString(value);
        context.disableCustomValidation();
        context.buildConstraintViolationBuilder(value).addConstraintViolation();
        context.enableCustomValidation();

        return value.equals(maskedValue);
    }

    private String maskSensitiveString(String value) {
        StringBuilder maskedValue = new StringBuilder();
        for (int i = 0; i < value.length(); i++) {
            if (i >= startPos && i <= endPos) {
                maskedValue.append(maskChar);
            } else {
                maskedValue.append(value.charAt(i));
            }
        }

        return maskedValue.toString();
    }
}
