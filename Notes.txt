package br.com.ibliss.basic.service.core.impl;

import br.com.ibliss.basic.dao.core.ProfileDAO;
import br.com.ibliss.basic.dao.core.UserDAO;
import br.com.ibliss.basic.entity.core.Company;
import br.com.ibliss.basic.entity.core.Profile;
import br.com.ibliss.basic.exception.ServiceException;
import br.com.ibliss.basic.filter.ProfileFilter;
import br.com.ibliss.basic.service.LoggerService;
import br.com.ibliss.basic.service.core.ProfileService;
import org.bson.types.ObjectId;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.Silent.class)
@ActiveProfiles("test")
public class ProfileServiceTest {

    private ProfileService profileService;

    @Mock
    private ProfileDAO profileDAO;

    @Mock
    private UserDAO userDAO;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private LoggerService loggerService;

    @Before
    public void init() {
        profileService = new ProfileServiceImpl(profileDAO, userDAO, restTemplate, loggerService);
    }


    @Test
    public void shouldCreateProfile_Successfully() throws ServiceException {
        var company = new Company();
        var profile = getProfile();

        when(profileDAO.findForDuplicates(any(Profile.class))).thenReturn(anyList());
        when(profileDAO.findCurrentCompany(null)).thenReturn(company);
        when(profileDAO.save(profile)).thenReturn(profile);

        var profileSaved = profileService.create(profile);

        assertNotNull("Não salvou profile corretamente", profileSaved);
    }

    @Test(expected = ServiceException.class)
    public void shouldThrowsException_WhenSaveDuplicatedProfile() throws ServiceException {
        var profile = getProfile();

        when(profileDAO.findForDuplicates(profile)).thenReturn(List.of(profile));

        profileService.create(profile);
    }

    @Test(expected = Exception.class)
    public void shouldThrowsServiceException_WhenSaveNullProfile() throws ServiceException {
        profileService.create(null);
    }

    @Test
    public void shouldUpdateProfile_Successfully() throws ServiceException {
        var profileDB = getProfile();
        profileDB.setName("Profile 1");

        var profileToSave = new Profile();
        profileToSave.setName("Profile 2");

        var nameDB = profileDB.getName();

        when(profileDAO.findById(any())).thenReturn(profileDB);
        when(profileDAO.save(any(Profile.class))).thenReturn(profileToSave);

        var savedProfile = profileService.update(profileToSave);

        assertNotEquals(savedProfile.getName(), nameDB);
    }

    @Test(expected = ServiceException.class)
    public void shouldThrowsException_WhenUpdateNotExistentProfile() throws ServiceException {
        var profileToSave = getProfile();

        when(profileDAO.findById(any())).thenReturn(null);

        profileService.update(profileToSave);
    }

    @Test
    public void shouldRemoveProfile_Successfully() throws ServiceException {
        var profile = getProfile();
        var objectId = new ObjectId("5aa803c7477e5203c51fe85b");
        profile.setId(objectId);

        when(profileDAO.findById(objectId)).thenReturn(profile);

        profileService.remove(objectId);

        verify(profileDAO, times(1)).remove(profile);
    }

    @Test
    public void shouldDoNothing_WhenProfileNotFound() throws ServiceException {
        var objectId = new ObjectId("5aa803c7477e5203c51fe85b");

        when(profileDAO.findById(objectId)).thenReturn(null);

        profileService.remove(objectId);

        verify(profileDAO, never()).remove(getProfile());
    }

    @Test
    public void shouldRemoveAllProfiles_Successfully() throws ServiceException {
        var objectId1 = new ObjectId("5aa803c7477e5203c51fe85b");
        var objectId2 = new ObjectId("6bb803c7477e5203c51ff96c");

        var objectIdList = List.of(objectId1, objectId2);

        var profile1 = getProfile();
        profile1.setId(objectId1);

        var profile2 = getProfile();
        profile2.setId(objectId2);

        var profilesList = List.of(profile1, profile2);

        when(profileDAO.findByCompany()).thenReturn(profilesList);
        when(userDAO.countUsersIntoProfiles(anyList())).thenReturn(0);

        profileService.removeAll(objectIdList);

        verify(profileDAO, times(1)).removeAll(profilesList);
    }

    @Test(expected = ServiceException.class)
    public void shouldThrowsServiceException_WhenRemoveEmptyList() throws ServiceException {
        profileService.removeAll(new ArrayList<>());
    }

    @Test(expected = ServiceException.class)
    public void shouldThrowsServiceException_WhenProfilesHasUsers() throws ServiceException {
        var objectId1 = new ObjectId("5aa803c7477e5203c51fe85b");
        var objectId2 = new ObjectId("6bb803c7477e5203c51ff96c");

        var objectIdList = List.of(objectId1, objectId2);

        var profile1 = getProfile();
        profile1.setId(objectId1);

        var profile2 = getProfile();
        profile2.setId(objectId2);

        var profilesList = List.of(profile1, profile2);

        when(profileDAO.findByCompany()).thenReturn(profilesList);
        when(userDAO.countUsersIntoProfiles(anyList())).thenReturn(5);

        profileService.removeAll(objectIdList);
    }

    @Test
    public void shouldListAllProfiles_Successfully() throws ServiceException {
        var profilesList = getProfilesList();

        when(profileDAO.findByCompany()).thenReturn(profilesList);

        var profilesReturned = profileService.list();

        assertNotNull("Não retornou lista de profiles", profilesReturned);
        assertEquals("Não retornou a lista de profiles correta", profilesReturned.size(), profilesList.size());
    }

    @Test
    public void shouldFindProfileById_Successfully() throws ServiceException {
        var profile = getProfile();
        var objectId = new ObjectId("5aa803c7477e5203c51fe85b");

        when(profileDAO.findById(objectId)).thenReturn(profile);

        var result = profileService.find(objectId);

        assertNotNull("Não retornou profile", result);
    }

    @Test
    public void shouldFindByFilter_Successfully() throws ServiceException {
        var profilesList = getProfilesList();

        when(profileDAO.findByFilter(any(ProfileFilter.class))).thenReturn(profilesList);

        var result = profileDAO.findByFilter(new ProfileFilter());

        assertNotNull("Não retornou lista de profiles", result);
        assertEquals("Não retornou a lista de profiles correta", result.size(), profilesList.size());
    }

    @Test(expected = ServiceException.class)
    public void shouldThrowsServiceException_WhenFindByNullProfileFilter() throws ServiceException {
        profileService.findByFilter(null);
    }

    @Test(expected = ServiceException.class)
    public void shouldThrowsServiceException_WhenDAOThrowsException() throws ServiceException {
        when(profileDAO.findByFilter(any(ProfileFilter.class))).thenThrow(ServiceException.class);

        profileService.findByFilter(new ProfileFilter());
    }

    @Test
    public void shouldCountByFilter_Successfully() throws ServiceException {
        Integer totalProfiles = 3;

        when(profileDAO.countByFilter(any(ProfileFilter.class))).thenReturn(totalProfiles);

        var result = profileService.countByFilter(new ProfileFilter());

        assertEquals("Não retornou a contagem de profiles correta", result, totalProfiles);
    }

    private List<Profile> getProfilesList() {
        return List.of(getProfile(), getProfile(), getProfile());
    }

    private Profile getProfile() {
        return new Profile();
    }

}



////////////////////////////////////////////////////////////////////////////////////////////////////////////


package br.com.ibliss.core.rest;

import br.com.ibliss.basic.entity.core.Project;
import br.com.ibliss.basic.model.DeletedDTO;
import br.com.ibliss.basic.model.RequestDTO;
import br.com.ibliss.basic.service.core.impl.ProjectServiceImpl;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.bson.types.ObjectId;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.*;

import static org.hamcrest.Matchers.hasSize;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@RunWith(MockitoJUnitRunner.Silent.class)
@WebMvcTest(controllers = ProjectResource.class)
@ActiveProfiles("test")
public class ProjectResourceTest {

    @InjectMocks
    private ProjectResource projectResource;

    @Mock
    private ProjectServiceImpl projectService;

    @MockBean
    private MockMvc mockMvc;

    private static final String BASE_URL = "/project";
    private ObjectMapper mapper;

    @Before
    public void setUp() {
        mapper = new ObjectMapper();
        mockMvc = MockMvcBuilders
                .standaloneSetup(projectResource)
                .build();
    }

    @Test
    public void shouldCreateProject() throws Exception {
        Project project = getProject("Project 1");

        when(projectService.create(project)).thenReturn(project);

        ResponseEntity<?> returned = projectResource.create(project);
        mockMvc.perform(put(BASE_URL)
                        .content(mapper.writeValueAsString(project))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());

        verify(projectService, atLeastOnce()).create(project);

        assertNotNull(returned.getBody());
    }

    @Test
    public void shouldUpdateProject() throws Exception {
        Project project = getProject("Project 1");

        when(projectService.update(project)).thenReturn(project);

        ResponseEntity<?> returned = projectResource.update(project);
        mockMvc.perform(put(BASE_URL + "/edit")
                        .content(mapper.writeValueAsString(project))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());

        verify(projectService, atLeastOnce()).update(project);

        assertNotNull(returned.getBody());
    }

    @Test
    public void shouldRemoveProject() throws Exception {
        DeletedDTO dto = getDeleteDTO();
        dto.setDeleted(1);
        ObjectId objectId = new ObjectId("5aa803c7477e5203c51fe85b");

        when(projectService.remove(objectId)).thenReturn(dto);

        ResponseEntity<?> returned = projectResource.remove(objectId.toString());
        mockMvc.perform(delete(BASE_URL + "?id=" + objectId)
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());

        verify(projectService, atLeastOnce()).remove(objectId);

        assertNotNull(returned.getBody());
        assertEquals("Não retornou a quantidade correta de Projetos excluídos", dto.getDeleted(), ((DeletedDTO) returned.getBody()).getDeleted());
    }

    @Test
    public void shouldRemoveAllProjects() throws Exception {
        DeletedDTO dto = getDeleteDTO();
        dto.setDeleted(2);

        RequestDTO requestDTO = new RequestDTO();
        requestDTO.setId(Arrays.asList(new ObjectId("5aa803c7477e5203c51fe85b"), new ObjectId("6bb914d7477e5203c51ff96c")));

        when(projectService.removeAll(anyList())).thenReturn(dto);

        ResponseEntity<?> returned = projectResource.removeAll(requestDTO);
        mockMvc.perform(delete(BASE_URL)
                        .content(mapper.writeValueAsString(requestDTO))
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());
        verify(projectService, atLeastOnce()).removeAll(requestDTO.getId());

        assertNotNull(returned.getBody());
        assertEquals("Não retornou a quantidade correta de Projetos deletados", dto.getDeleted(), ((DeletedDTO) returned.getBody()).getDeleted());

    }

    @Test
    public void shouldReturnAllProjects() throws Exception {
        List<Project> projectList = Arrays.asList(getProject("Project 1"), getProject("Project 2"));

        when(projectService.list(null, null)).thenReturn(projectList);

        ResponseEntity<?> returned = projectResource.list();
        mockMvc.perform(get(BASE_URL)
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$", hasSize(projectList.size())));

        verify(projectService, atLeastOnce()).list(null, null);

        assertNotNull(returned.getBody());
    }

    @Test
    public void shouldFindById() throws Exception {
        Project project = getProject("Project 1");
        String id = "5aa803c7477e5203c51fe85b";

        when(projectService.findById(any())).thenReturn(project);

        ResponseEntity<?> returned = projectResource.findById(id);
        mockMvc.perform(get(BASE_URL + "?id=" + id)
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());
        verify(projectService, atLeastOnce()).findById(new ObjectId(id));

        assertNotNull(returned.getBody());
    }

    @Test
    public void shouldReturnsProjectsStatus() throws Exception {
        Map<String, Integer> map = new HashMap<>();
        map.put("total", 2);
        map.put("open", 2);
        map.put("closed", 0);

        when(projectService.projectsStatus()).thenReturn(map);

        ResponseEntity<?> returned = projectResource.projectsStatus();
        mockMvc.perform(get(BASE_URL + "/projects-status")
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());
        verify(projectService, atLeastOnce()).projectsStatus();

        assertNotNull(returned.getBody());
        assertEquals("Total não confere", ((Map<?, ?>) returned.getBody()).get("total"), map.get("total"));
        assertEquals("Open não confere", ((Map<?, ?>) returned.getBody()).get("open"), map.get("open"));
        assertEquals("Closed não confere", ((Map<?, ?>) returned.getBody()).get("closed"), map.get("closed"));
    }

    @Test
    public void shouldReturnsExecutionsStatus() throws Exception {
        Map<String, Integer> map = new HashMap<>();
        map.put("total", 2);
        map.put("open", 2);
        map.put("closed", 0);
        map.put("totalExecutions", 1);
        map.put("criticals", 1);

        String id = "5aa803c7477e5203c51fe85b";

        when(projectService.executionsStatus(new ObjectId(id))).thenReturn(map);

        ResponseEntity<?> returned = projectResource.executionsStatus(id);
        mockMvc.perform(get(BASE_URL + "/executions-status" + "?id=" + id)
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());
        verify(projectService, atLeastOnce()).executionsStatus(new ObjectId(id));

        assertNotNull(returned.getBody());
        assertEquals("Total não confere", ((Map<?, ?>) returned.getBody()).get("total"), map.get("total"));
        assertEquals("Open não confere", ((Map<?, ?>) returned.getBody()).get("open"), map.get("open"));
        assertEquals("Closed não confere", ((Map<?, ?>) returned.getBody()).get("closed"), map.get("closed"));
        assertEquals("Total executions não confere", ((Map<?, ?>) returned.getBody()).get("totalExecutions"), map.get("totalExecutions"));
        assertEquals("Criticals não confere", ((Map<?, ?>) returned.getBody()).get("criticals"), map.get("criticals"));
    }

    @Test
    public void shouldByName() throws Exception {
        String name = "Project 1";
        List<Project> projects = Collections.singletonList(getProject(name));

        when(projectService.findByName(anyString())).thenReturn(projects);

        ResponseEntity<?> returned = projectResource.findByName(name);
        mockMvc.perform(post(BASE_URL + "/findByName" + "?name=" + name)
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());
        verify(projectService, atLeastOnce()).findByName(name);

        assertNotNull(returned.getBody());
    }

    @Test
    public void shouldFindAllActive() throws Exception {
        List<Project> projects = Arrays.asList(getProject("Project 1"), getProject("Project 2"));

        when(projectService.findAllActive()).thenReturn(projects);

        ResponseEntity<?> returned = projectResource.findAllActive();
        mockMvc.perform(get(BASE_URL + "/findAllActive")
                        .contentType(MediaType.APPLICATION_JSON_VALUE))
                .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
                .andExpect(status().isOk());
        verify(projectService, atLeastOnce()).findAllActive();

        assertNotNull(returned.getBody());
        assertEquals("Total não confere", ((List<?>) returned.getBody()).size(), projects.size());
    }

    private Project getProject(String name) {
        Project p = new Project();
        if (null != name)
            p.setName(name);
        return p;
    }

    private DeletedDTO getDeleteDTO() {
        return new DeletedDTO();
    }
}
