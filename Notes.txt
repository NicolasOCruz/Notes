describe('ContentComponent', () => {
  let component: ContentComponent;
  let fixture: ComponentFixture<ContentComponent>;
  let processService: ProcessService;
  let activatedRoute: ActivatedRoute;
  let router: Router;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ContentComponent],
      providers: [ProcessService, ActivatedRoute, Router]
    });
    fixture = TestBed.createComponent(ContentComponent);
    component = fixture.componentInstance;
    processService = TestBed.inject(ProcessService);
    activatedRoute = TestBed.inject(ActivatedRoute);
    router = TestBed.inject(Router);
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  describe('ngOnInit', () => {
    it('should call getProcessLazyLoading with correct process id', () => {
      const processId = '1';
      spyOn(activatedRoute.snapshot.paramMap, 'get').and.returnValue(processId);
      spyOn(processService, 'getProcessLazyLoading').and.returnValue(of({ id: processId }));

      component.ngOnInit();

      expect(processService.getProcessLazyLoading).toHaveBeenCalledWith(processId);
    });

    it('should set process with response from getProcessLazyLoading', () => {
      const mockProcess = { id: '1', name: 'Process 1' };
      spyOn(activatedRoute.snapshot.paramMap, 'get').and.returnValue(mockProcess.id);
      spyOn(processService, 'getProcessLazyLoading').and.returnValue(of(mockProcess));

      component.ngOnInit();

      expect(component.process).toEqual(mockProcess);
    });
  });

  describe('handleClick', () => {
    it('should navigate to correct route', () => {
      const fileId = 'file-id';
      component.process = { id: '1' } as any;
      spyOn(router, 'navigate');

      component.handleClick(fileId);

      expect(router.navigate).toHaveBeenCalledWith(['processes', '1', 'contents', fileId, 'files']);
    });

    it('should not navigate if process is undefined', () => {
      spyOn(router, 'navigate');

      component.handleClick('file-id');

      expect(router.navigate).not.toHaveBeenCalled();
    });
  });
});