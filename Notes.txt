@Aspect
@Component
public class SensitiveDataAspect {

    @Around("execution(public String *.toString()) && @target(sensitiveData)")
    public Object maskToString(ProceedingJoinPoint joinPoint, SensitiveData sensitiveData) throws Throwable {
        Object target = joinPoint.getTarget();
        Field[] fields = target.getClass().getDeclaredFields();

        for (Field field : fields) {
            if (field.isAnnotationPresent(SensitiveData.class)) {
                SensitiveData annotation = field.getAnnotation(SensitiveData.class);
                field.setAccessible(true);
                Object value = field.get(target);
                if (value instanceof String) {
                    field.set(target, maskValue((String) value, annotation));
                }
            }
        }

        return joinPoint.proceed();
    }

    private String maskValue(String value, SensitiveData annotation) {
        if (value == null) {
            return null;
        }

        int start = annotation.start();
        int end = annotation.end();
        char maskChar = annotation.maskChar();

        if (end < 0 || end >= value.length()) {
            end = value.length();
        }

        if (start < 0 || start >= end) {
            start = 0;
        }

        int length = end - start;
        String maskedValue = value.substring(0, start);
        maskedValue += String.valueOf(maskChar).repeat(Math.max(0, length));
        maskedValue += value.substring(end);

        return maskedValue;
    }
}