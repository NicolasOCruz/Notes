import { TestBed } from '@angular/core/testing';
import { ProcessService } from './process.service';
import { NativeCommunicationService } from './native-communication.service';
import { Constants } from './constants';
import { Process } from './process';
import { of } from 'rxjs';

describe('ProcessService', () => {
  let service: ProcessService;
  let nativeCommunicationService: NativeCommunicationService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [ProcessService, NativeCommunicationService]
    });
    service = TestBed.inject(ProcessService);
    nativeCommunicationService = TestBed.inject(NativeCommunicationService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('setProcesses', () => {
    it('should set processes in memory', () => {
      const processes: Process[] = [{ id: '1' }, { id: '2' }];
      spyOn(nativeCommunicationService, 'setMemoryItem');
      service.setProcesses(processes);
      expect(nativeCommunicationService.setMemoryItem).toHaveBeenCalledWith(Constants.ListProcesses, JSON.stringify(processes));
    });
  });

  describe('getProcesses', () => {
    it('should return processes from memory', () => {
      const processes: Process[] = [{ id: '1' }, { id: '2' }];
      const response = { data: processes };
      spyOn(nativeCommunicationService, 'getMemoryItem').and.returnValue(of(response));
      service.getProcesses().subscribe((res) => {
        expect(res).toEqual(processes);
      });
    });
  });

  describe('getProcessLazyLoading', () => {
    it('should return a process by id from memory', () => {
      const processes: Process[] = [{ id: '1' }, { id: '2' }];
      const response = { data: processes };
      spyOn(nativeCommunicationService, 'getMemoryItem').and.returnValue(of(response));
      service.getProcessLazyLoading('1').subscribe((res) => {
        expect(res).toEqual({ id: '1' });
      });
    });
  });

});
